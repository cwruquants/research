{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Testing Setup Class\n",
    "\n",
    "This notebook demonstrates the main functionality of the `Setup` class from `attribute_class.setup`. It creates dummy attribute objects, initializes the `Setup` object, and runs the `fit` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Adjust sys.path to import src modules ---\n",
    "import sys\n",
    "import os\n",
    "\n",
    "src_path = os.path.abspath(os.path.join(os.path.dirname(), '..'))\n",
    "if src_path not in sys.path:\n",
    "    sys.path.insert(0, src_path)\n",
    "\n",
    "# Import Setup class\n",
    "from attribute_class.setup import Setup\n",
    "\n",
    "# Import Attr class (assuming it is in attribute.py)\n",
    "from attribute import Attr\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Dummy Attr Objects\n",
    "The `Setup.fit()` method expects objects with a `.text` attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Minimal dummy Attr class if you don't have the real one\n",
    "class DummyAttr:\n",
    "    def __init__(self, text):\n",
    "        self.text = text\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f\"DummyAttr(text={self.text!r})\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialize Setup Object\n",
    "\n",
    "Because we don't have a real Excel file, we'll mock the `ExceltoList` method to return fixed positive and negative word lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MockSetup(Setup):\n",
    "    def ExceltoList(self, file_path, sheet_name):\n",
    "        if sheet_name == \"positive\":\n",
    "            return [\"good\", \"happy\", \"excellent\"]\n",
    "        elif sheet_name == \"negative\":\n",
    "            return [\"bad\", \"sad\", \"terrible\"]\n",
    "        else:\n",
    "            return []\n",
    "\n",
    "# Initialize the mock Setup object\n",
    "setup = MockSetup(sheet_name_positive=\"positive\", sheet_name_negative=\"negative\", file_path=\"dummy.xlsx\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test `fit()` on some sample attribute objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "samples = [\n",
    "    DummyAttr(\"I am very happy with this excellent product!\"),\n",
    "    DummyAttr(\"This is a bad and terrible mistake.\"),\n",
    "    DummyAttr(\"I feel neutral about this.\"),\n",
    "    DummyAttr(\"\")  # Empty text edge case\n",
    "]\n",
    "\n",
    "for i, attr in enumerate(samples):\n",
    "    try:\n",
    "        result = setup.fit(attr)\n",
    "        print(f\"Sample {i} result:\")\n",
    "        print(f\"  text: {attr.text}\")\n",
    "        print(f\"  sentiment: {attr.sentiment}\")\n",
    "        print(f\"  LM: {attr.LM}\")\n",
    "        print(f\"  HIV4: {attr.HIV4}\")\n",
    "        print(f\"  ML: {attr.ML}\\n\")\n",
    "    except Exception as e:\n",
    "        print(f\"Sample {i} error: {e}\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

